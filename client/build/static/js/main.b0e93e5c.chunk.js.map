{"version":3,"sources":["Booking.js","Bookings.js","AddBooking.js","App.js","serviceWorker.js","index.js"],"names":["Booking","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","state","room","owner","date","setState","book","react_default","a","createElement","dist_default","format","Component","Bookings","bookings","_this2","Axios","get","then","res","data","catch","err","console","log","reactstrap_es","map","booking","src_Booking","AddBooking","handleChangeDate","startDate","handleChangeOwner","e","target","value","handleChangeRoom","handleSubmit","axios","default","baseURL","post","concat","redirectToHome","moment","Redirect","push","to","for","onChange","type","name","id","placeholder","es","placeholderText","selected","showTimeSelect","timeFormat","timeIntervals","dateFormat","locale","onClick","App","toggle","bind","assertThisInitialized","isOpen","BrowserRouter","color","light","expand","tag","Link","navbar","className","Route","exact","path","component","Boolean","window","location","hostname","match","ReactDOM","render","src_App","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.b0e93e5c.chunk.js","sourcesContent":["import React, { Component } from 'react';\r\nimport Moment from 'react-moment';\r\n\r\nclass Booking extends Component {\r\n  constructor(props) {\r\n    super(props)\r\n\r\n    this.state = {\r\n      room: '',\r\n      owner: '',\r\n      date: ''\r\n    }\r\n  }\r\n\r\n  componentDidMount() {\r\n    this.setState({\r\n      room: this.props.book.room,\r\n      owner: this.props.book.owner,\r\n      date: this.props.book.date\r\n    })\r\n  }\r\n\r\n  render() {\r\n    return (\r\n      <tr>\r\n        <td>{this.state.owner}</td>\r\n        <td>{this.state.room}</td>\r\n        <td>\r\n          <Moment format=\"dddd, MMMM Do YYYY, h:mm a\">{this.state.date}</Moment>\r\n        </td>\r\n      </tr>\r\n    )\r\n  }\r\n}\r\n\r\nexport default Booking;","import React, { Component } from 'react'\r\nimport { Table, Container } from 'reactstrap';\r\nimport Axios from 'axios';\r\n\r\nimport Booking from './Booking'\r\n\r\nclass Bookings extends Component {\r\n  state = {\r\n    bookings: []\r\n  }\r\n\r\n  componentDidMount() {\r\n    Axios.get(`http://localhost:8080/calendar`)\r\n      .then(res => {\r\n        const bookings = res.data;\r\n        this.setState({ bookings });\r\n      })\r\n      .catch(err => console.log(err))\r\n  }\r\n\r\n  render() {\r\n    return (\r\n      <Container>\r\n        <Table>\r\n          <thead>\r\n            <tr>\r\n              <th>Owner</th>\r\n              <th>Room #</th>\r\n              <th>Date</th>\r\n            </tr>\r\n          </thead>\r\n          <tbody>\r\n            {this.state.bookings.map(booking => <Booking book={booking} />)}\r\n          </tbody>\r\n        </Table>\r\n      </Container>\r\n    )\r\n  }\r\n}\r\n\r\nexport default Bookings;","import React, { Component } from 'react';\r\nimport { Container, Button, Form, FormGroup, Label, Input, FormText } from 'reactstrap';\r\nimport axios from 'axios';\r\nimport DatePicker from 'react-datepicker';\r\nimport moment from 'moment';\r\nimport { Redirect } from 'react-router-dom';\r\n\r\nimport 'react-datepicker/dist/react-datepicker.css';\r\n\r\nclass AddBooking extends Component {\r\n  constructor(props) {\r\n    super(props)\r\n    this.state = {\r\n      startDate: moment(),\r\n      owner: '',\r\n      room: '',\r\n      redirectToHome: false\r\n    };\r\n  }\r\n\r\n  handleChangeDate = (date) => {\r\n    this.setState({ startDate: date }, () => console.log(this.state.startDate));\r\n  }\r\n  handleChangeOwner = (e) => {\r\n    this.setState({ owner: e.target.value })\r\n  }\r\n  handleChangeRoom = (e) => {\r\n    this.setState({ room: e.target.value })\r\n  }\r\n  handleSubmit = () => {\r\n\r\n    axios.default.baseURL = 'https://calendar-lean.herokuapp.com/';\r\n\r\n    axios.post('/calendar', {\r\n      date: this.state.startDate,\r\n      owner: this.state.owner,\r\n      room: this.state.room\r\n      })\r\n      .then((res) => {\r\n        console.log(`Success: ${res}`)\r\n        this.setState({ redirectToHome: true })\r\n      })\r\n      .catch ((err) => {\r\n        console.log(`An error occured while attempting to send data to db: ${err}`)\r\n      });\r\n  }\r\n  render() {\r\n    if (this.state.redirectToHome) {\r\n      return <Redirect push to=\"/\" />\r\n    }\r\n    \r\n    return (\r\n      <Container>\r\n        <Form>\r\n          <FormGroup>\r\n            <Label for=\"Owner\">Owner</Label>\r\n            <Input\r\n              value={this.state.owner}\r\n              onChange={this.handleChangeOwner}\r\n              type=\"text\"\r\n              name=\"owner\"\r\n              id=\"idOwner\"\r\n              placeholder=\"John Doe\"\r\n            />\r\n          </FormGroup>\r\n          <FormGroup>\r\n            <Label for=\"Date\">Date - Time</Label>\r\n            <DatePicker\r\n              placeholderText=\"Click to select a date time\"\r\n              selected={this.state.startDate}\r\n              onChange={this.handleChangeDate}\r\n              showTimeSelect\r\n              timeFormat=\"HH:mm\"\r\n              timeIntervals={55}\r\n              dateFormat=\"YYYY/MM/DD\"\r\n              locale=\"en-ca\"\r\n            />\r\n          </FormGroup>\r\n          <FormGroup>\r\n            <Label for=\"Room\">Room</Label>\r\n            <Input\r\n              value={this.state.room}\r\n              onChange={this.handleChangeRoom}\r\n              type=\"text\"\r\n              name=\"room\"\r\n              id=\"idRoom\"\r\n              placeholder=\"DB4040\"\r\n            />\r\n          </FormGroup>\r\n        <Button onClick={this.handleSubmit}>Submit</Button>\r\n      </Form>\r\n    </Container>\r\n  )}\r\n}\r\n\r\nexport default AddBooking;","import React, { Component } from 'react';\r\nimport { BrowserRouter as Router, Route, Link } from \"react-router-dom\";\r\n\r\nimport {\r\n  Collapse,\r\n  Navbar,\r\n  NavbarToggler,\r\n  NavbarBrand,\r\n  Nav,\r\n  NavItem,\r\n  NavLink,\r\n  Container,\r\n  UncontrolledDropdown,\r\n  DropdownToggle,\r\n  DropdownMenu,\r\n  DropdownItem\r\n} from 'reactstrap';\r\n\r\nimport Bookings from './Bookings'\r\nimport AddBooking from './AddBooking'\r\n\r\nclass App extends Component {\r\n  constructor(props) {\r\n    super(props)\r\n\r\n    this.toggle = this.toggle.bind(this);\r\n    this.state = {\r\n      isOpen: false\r\n    }\r\n  }\r\n\r\n  toggle() {\r\n    this.setState({\r\n      isOpen: !this.state.isOpen\r\n    })\r\n  }\r\n  render() {\r\n    return (\r\n      <Router>\r\n        <div>\r\n          <Navbar color=\"light\" light expand=\"md\">\r\n            <NavbarBrand tag={Link} to=\"/\">Calendar</NavbarBrand>\r\n            <NavbarToggler onClick={this.toggle} />\r\n            <Collapse isOpen={this.state.isOpen} navbar>\r\n              <Nav className=\"ml-auto\" navbar>\r\n                <NavItem>\r\n                  <NavLink tag={Link} to=\"/bookings/add\">Add Booking</NavLink>\r\n                </NavItem>\r\n              </Nav>\r\n            </Collapse>\r\n          </Navbar>\r\n          \r\n          <Route exact path=\"/\" component={Bookings} />\r\n          <Route path=\"/bookings/add\" component={AddBooking} />\r\n        </div>\r\n      </Router>\r\n\r\n\r\n    );\r\n  }\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read http://bit.ly/CRA-PWA.\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.1/8 is considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl)\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      if (\r\n        response.status === 404 ||\r\n        response.headers.get('content-type').indexOf('javascript') === -1\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready.then(registration => {\r\n      registration.unregister();\r\n    });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport 'bootstrap/dist/css/bootstrap.min.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(<App />, document.getElementById('root'));\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: http://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}